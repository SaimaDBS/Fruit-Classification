# -*- coding: utf-8 -*-
"""CNN Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u9d47oiIR6ikgTBod3mNJ4B1XLzZYcA_

# Fruit Classification using CNN

If you changed something in your drive after you did the drive.mount('/content/drive'), you have to remount it with drive.mount('/content/drive', force_remount=True). force_remount is used only when you have to mount the drive irrespective of whether its loaded previously.
"""

!pip install tensorflowjs



from google.colab import drive
drive.mount('/content/drive', force_remount=True)

!unzip "/content/drive/My Drive/fruits.zip"

import cv2
import numpy as np
import os
import tensorflowjs as tfjs

trainingDataset = []
classNumber = 0
img_size = 100
path = "/content/drive/My Drive/fruitsData/Training"

"""The clear() method removes all items from the list."""

trainingDataset.clear()
for folder in (os.listdir(path)):
  print(classNumber)
  fp = os.path.join(path,folder)
  for eachImage in os.listdir(fp):
    imagePath = os.path.join(fp,eachImage)
    img = (cv2.imread(imagePath,cv2.IMREAD_GRAYSCALE))/255
    trainingDataset.append([img,classNumber])
  classNumber = classNumber + 1

print(len(trainingDataset))
print(len(trainingDataset[0]))
print(trainingDataset[0])

"""Module 'time' is used to handle time-related tasks."""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.utils import to_categorical
import pickle
import time

X = []
Y = []
img_size = 100
np.random.shuffle(trainingDataset)
for features, label in trainingDataset:
    X.append(features)
    Y.append(label)
print(Y)

X = np.array(X).reshape(-1, img_size, img_size, 1)
Y_binary = to_categorical(Y)
print(Y_binary)

"""**Overfitting:** Good performance on the training data, poor generliazation to other data. <br>
**Underfitting:** Poor performance on the training data and poor generalization to other data.

**Dropout** is a technique where randomly selected neurons are ignored during training. They are “dropped-out” randomly. This means that their contribution to the activation of downstream neurons is temporally removed on the forward pass and any weight updates are not applied to the neuron on the backward pass.<br>
(Dropout(0.3) means setting 30% inputs to zero.
"""

model = Sequential()

model.add(Conv2D(40, (3, 3), input_shape=(100,100,1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Conv2D(60, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Conv2D(80, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Flatten())

model.add(Dense(100))
model.add(Activation('relu'))
 
model.add(Dense(3))
model.add(Activation('softmax'))

"""TensorBoard is a tool/dashboard for providing the measurements and visualizations needed during the machine learning workflow."""

# NAME = "3-conv-128-layer-dense-1-out-2-softmax-categorical-cross-2-CNN"
# tensorboard = TensorBoard(log_dir="/content/drive/My Drive/fruitsData/Logs/{}".format(NAME))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'],
              )

"""---- batch_size = 32 <br>
---- validation_split = 0.3
"""

model.fit(X, Y_binary,
          batch_size = 32,
          epochs=10, validation_split = 0.3)
 
model.save("/content/fruits-360_dataset/fruits-360/Models/{NAME}.model")

"""prepare() function prepares a test image according to the NN architecture"""

def prepare(filepath):
    img_size = 100 
    img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)/255  
    img_resize = cv2.resize(img, (img_size, img_size))  
    return img_resize.reshape(-1, img_size, img_size, 1)

"""The numpy.argmax() function returns index of the max element of the array"""

prediction = model.predict(prepare("/content/drive/My Drive/fruitsData/Test/Cocos/6_100.jpg"))
print((prediction))

CATEGORIES = ["Apple Braeburn", "Banana", "Cocos"]

pred_class = CATEGORIES[np.argmax(prediction)]
print(pred_class)

